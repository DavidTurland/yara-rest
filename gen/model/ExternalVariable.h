/**
* Yara Rest Server
* A simple Yara Rest server
*
* The version of the OpenAPI document: 0.3.0
* Contact: david@turland.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * ExternalVariable.h
 *
 * 
 */

#ifndef ExternalVariable_H_
#define ExternalVariable_H_


#include <string>
#include <nlohmann/json.hpp>

namespace org::turland::yara::model
{

/// <summary>
/// 
/// </summary>
class  ExternalVariable
{
public:
    ExternalVariable();
    virtual ~ExternalVariable() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const ExternalVariable& rhs) const;
    bool operator!=(const ExternalVariable& rhs) const;

    /////////////////////////////////////////////
    /// ExternalVariable members

    /// <summary>
    /// which component to define veriable for
    /// </summary>
    std::string getComponent() const;
    void setComponent(std::string const& value);
    /// <summary>
    /// type of external variable to define
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getIdentifier() const;
    void setIdentifier(std::string const& value);
    /// <summary>
    /// 
    /// </summary>
    std::string getValue() const;
    void setValue(std::string const& value);
    /// <summary>
    /// scanner to assign ext variable to (required if component isscanner)
    /// </summary>
    int64_t getScanner() const;
    void setScanner(int64_t const value);
    bool scannerIsSet() const;
    void unsetScanner();

    friend  void to_json(nlohmann::json& j, const ExternalVariable& o);
    friend  void from_json(const nlohmann::json& j, ExternalVariable& o);
protected:
    std::string m_Component;

    std::string m_Type;

    std::string m_Identifier;

    std::string m_Value;

    int64_t m_Scanner;
    bool m_ScannerIsSet;
    
};

} // namespace org::turland::yara::model

#endif /* ExternalVariable_H_ */
