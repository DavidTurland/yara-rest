/**
* Yara Rest Server
* A simple Yara Rest server
*
* The version of the OpenAPI document: 0.3.0
* Contact: david@turland.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RuleFile.h"
#include "Helpers.h"

#include <sstream>

namespace org::turland::yara::model
{

RuleFile::RuleFile()
{
    m_r_namespace = "";
    m_r_namespaceIsSet = false;
    m_Filepath = "";
    
}

void RuleFile::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::turland::yara::helpers::ValidationException(msg.str());
    }
}

bool RuleFile::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RuleFile::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RuleFile" : pathPrefix;

            
    return success;
}

bool RuleFile::operator==(const RuleFile& rhs) const
{
    return
    
    
    
    ((!rNamespaceIsSet() && !rhs.rNamespaceIsSet()) || (rNamespaceIsSet() && rhs.rNamespaceIsSet() && getRNamespace() == rhs.getRNamespace())) &&
    
    (getFilepath() == rhs.getFilepath())
    
    
    ;
}

bool RuleFile::operator!=(const RuleFile& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RuleFile& o)
{
    j = nlohmann::json::object();
    if(o.rNamespaceIsSet())
        j["namespace"] = o.m_r_namespace;
    j["filepath"] = o.m_Filepath;
    
}

void from_json(const nlohmann::json& j, RuleFile& o)
{
    if(j.find("namespace") != j.end())
    {
        j.at("namespace").get_to(o.m_r_namespace);
        o.m_r_namespaceIsSet = true;
    } 
    j.at("filepath").get_to(o.m_Filepath);
    
}

std::string RuleFile::getRNamespace() const
{
    return m_r_namespace;
}
void RuleFile::setRNamespace(std::string const& value)
{
    m_r_namespace = value;
    m_r_namespaceIsSet = true;
}
bool RuleFile::rNamespaceIsSet() const
{
    return m_r_namespaceIsSet;
}
void RuleFile::unsetr_namespace()
{
    m_r_namespaceIsSet = false;
}
std::string RuleFile::getFilepath() const
{
    return m_Filepath;
}
void RuleFile::setFilepath(std::string const& value)
{
    m_Filepath = value;
}


} // namespace org::turland::yara::model

