/**
* Yara Rest Server
* A simple Yara Rest server
*
* The version of the OpenAPI document: 0.3.0
* Contact: david@turland.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ScanFileRules.h"
#include "Helpers.h"

#include <sstream>

namespace org::turland::yara::model
{

ScanFileRules::ScanFileRules()
{
    m_Filename = "";
    m_FilenameIsSet = false;
    m_RulesIsSet = false;
    
}

void ScanFileRules::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::turland::yara::helpers::ValidationException(msg.str());
    }
}

bool ScanFileRules::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ScanFileRules::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ScanFileRules" : pathPrefix;

             
    if (rulesIsSet())
    {
        const std::vector<org::turland::yara::model::Rule>& value = m_Rules;
        const std::string currentValuePath = _pathPrefix + ".rules";
                
        
        if (value.size() > 5)
        {
            success = false;
            msg << currentValuePath << ": must have at most 5 elements;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::turland::yara::model::Rule& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".rules") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool ScanFileRules::operator==(const ScanFileRules& rhs) const
{
    return
    
    
    
    ((!filenameIsSet() && !rhs.filenameIsSet()) || (filenameIsSet() && rhs.filenameIsSet() && getFilename() == rhs.getFilename())) &&
    
    
    ((!rulesIsSet() && !rhs.rulesIsSet()) || (rulesIsSet() && rhs.rulesIsSet() && getRules() == rhs.getRules()))
    
    ;
}

bool ScanFileRules::operator!=(const ScanFileRules& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ScanFileRules& o)
{
    j = nlohmann::json::object();
    if(o.filenameIsSet())
        j["filename"] = o.m_Filename;
    if(o.rulesIsSet() || !o.m_Rules.empty())
        j["rules"] = o.m_Rules;
    
}

void from_json(const nlohmann::json& j, ScanFileRules& o)
{
    if(j.find("filename") != j.end())
    {
        j.at("filename").get_to(o.m_Filename);
        o.m_FilenameIsSet = true;
    } 
    if(j.find("rules") != j.end())
    {
        j.at("rules").get_to(o.m_Rules);
        o.m_RulesIsSet = true;
    } 
    
}

std::string ScanFileRules::getFilename() const
{
    return m_Filename;
}
void ScanFileRules::setFilename(std::string const& value)
{
    m_Filename = value;
    m_FilenameIsSet = true;
}
bool ScanFileRules::filenameIsSet() const
{
    return m_FilenameIsSet;
}
void ScanFileRules::unsetFilename()
{
    m_FilenameIsSet = false;
}
std::vector<org::turland::yara::model::Rule> ScanFileRules::getRules() const
{
    return m_Rules;
}
void ScanFileRules::setRules(std::vector<org::turland::yara::model::Rule> const& value)
{
    m_Rules = value;
    m_RulesIsSet = true;
}
bool ScanFileRules::rulesIsSet() const
{
    return m_RulesIsSet;
}
void ScanFileRules::unsetRules()
{
    m_RulesIsSet = false;
}


} // namespace org::turland::yara::model

